"""
Задание 1.	Написать программу, которая будет складывать, вычитать,
умножать или делить два числа. Числа и знак операции вводятся пользователем.
После выполнения вычисления программа не должна завершаться, а должна
запрашивать новые данные для вычислений. Завершение программы должно
выполняться при вводе символа '0' в качестве знака операции. Если пользователь
вводит неверный знак (не '0', '+', '-', '*', '/'), то программа должна
сообщать ему об ошибке и снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ

Решите через рекурсию. В задании нельзя применять циклы.

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):
"""
def calc():
    operators = ['+', '-', '/', '*', '0']
    operator = input('Введите требуемую операцию: +, -, /, *, или 0 - для выхода из расчета: ')

    if operator not in operators:
        print('Вы ввели недопустимую операцию - повторите ввод: ')
        calc()

    if operator == '0':
        print("Спасибо, вы вышли")
        return

    try:
        x = int(input('Введите первый операнд x: '))
        y = int(input('Введите второй операнд y: '))

    except ValueError:
        print('Ошибка ввода операции!')
        calc()

    if operator == '+':
        print(f'x + y = {x + y}')
        calc()
    elif operator == '-':
        print(f'x - y = {x -y}')
        calc()
    elif operator == '*':
        print(f'x * y = {x * y}')
        calc()
    elif operator == '/':
        try:
            print(f'Ваш результат: {x // y}')
            return calc()
        except ZeroDivisionError:
            print('Деление на 0 запрещено!')
            calc()
calc()

"""
Задание 2.	Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены, рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.

Решите через рекурсию. В задании нельзя применять циклы.

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def even_odd_count(num, even=0, odd=0):

    if num == 0:
        return even, odd
    else:
        current_digit = num % 10
        num = num // 10
        if current_digit % 2 == 0:
            even += 1
            return even_odd_count(num, even, odd)
        else:
            odd += 1
            return even_odd_count(num, even, odd)


if __name__ == '__main__':
    try:
        num = int(input('Введите число: '))
    except ValueError:
        print('Ошибка ввода!')
    even, odd = even_odd_count(num)
    print(f'В введенном числе {even} чётных и {odd} нечётных числа')
  
 
 """
Задание 3.	Сформировать из введенного числа
обратное по порядку входящих в него
цифр и вывести на экран. Например, если введено число 3486,
то надо вывести число 6843.

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все цифры извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.

Решите через рекурсию. В задании нельзя применять циклы.

Пример:
Введите число, которое требуется перевернуть: 123
Перевернутое число: 321
Не забудьте проверить на числе, которое оканчивается на 0.
1230 -> 0321
"""


def number_reverse(num):
    if num < 10:
        return num
    else:
        return str(num % 10) + str(number_reverse(num // 10))


if __name__ == '__main__':
    try:
        num = int(input("Введите число: "))
        print(f'Число наоборот: {number_reverse(num)}')
    except ValueError:
        print('Введено недопустимое значение')

"""
Задание 4.	Найти сумму n элементов следующего ряда чисел:
1 -0.5 0.25 -0.125 ...
Количество элементов (n) вводится с клавиатуры.

Пример:
Введите количество элементов: 3
Количество элементов - 3, их сумма - 0.75

Решите через рекурсию. В задании нельзя применять циклы.
Нужно обойтисть без создания массива!
"""

def rec_sum(n, val) -> float:
    if n == 0:
        return 0
    else:
        return (-0.5) ** (val - n) + rec_sum(n - 1, val)

number = int(input('Введите количество элементов: '))
print(f'Количество элементов - {number}, их сумма - {rec_sum(number,number)}')

"""
Задание 5.	Вывести на экран коды и символы таблицы ASCII, начиная с символа
под номером 32 и заканчивая 127-м включительно.
Вывод выполнить в табличной форме: по десять пар "код-символ" в каждой строке.

Пример:
32 -   33 - ! 34 - " 35 - # 36 - $ 37 - % 38 - & 39 - ' 40 - ( 41 - )
42 - * 43 - + 44 - , 45 - - 46 - . 47 - / 48 - 0 49 - 1 50 - 2 51 - 3
52 - 4 53 - 5 54 - 6 55 - 7 56 - 8 57 - 9 58 - : 59 - ; 60 - < 61 - =
62 - > 63 - ? 64 - @ 65 - A 66 - B 67 - C 68 - D 69 - E 70 - F 71 - G
72 - H 73 - I 74 - J 75 - K 76 - L 77 - M 78 - N 79 - O 80 - P 81 - Q
82 - R 83 - S 84 - T 85 - U 86 - V 87 - W 88 - X 89 - Y 90 - Z 91 - [
92 - \ 93 - ] 94 - ^ 95 - _ 96 - ` 97 - a 98 - b 99 - c 100 - d 101 - e
102 - f 103 - g 104 - h 105 - i 106 - j 107 - k 108 - l 109 - m 110 - n 111 - o
112 - p 113 - q 114 - r 115 - s 116 - t 117 - u 118 - v 119 - w 120 - x 121 - y
122 - z 123 - { 124 - | 125 - } 126 - ~ 127 - 

Решите через рекурсию. В задании нельзя применять циклы.

Допускается исп-е встроенных ф-ций
"""
from sys import exit

def symbols_table(n, number):
    if number == 128:
      exit()

    elif n == 10:
        n = 0
        print('')
        return symbols_table(n, number)
    else:
        print(f'{number} - {chr(number)}', end=" ")
        return symbols_table(n + 1, number + 1)

if __name__=='__main__':

    symbols_table(0, 32)
